{"version":3,"sources":["components/DaySection.js","components/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["DaySection","props","dayNumber","day","min","max","react_default","a","createElement","className","concat","flickityOptions","initialIndex","pageDots","draggable","Carousel","lib_default","elementType","options","disableImagesLoaded","reloadOnUpdate","days","arrayChunker","array","chunk","i","j","tempArray","newArray","length","slice","push","App","state","city","dayChunks","dates","showCarousel","getWeatherData","_callee","dayMinMax","regenerator_default","wrap","_context","prev","next","axios","get","then","res","_this","setState","data","name","list","datesMinMax","forEach","currentDay","dt_txt","substr","temps","e","main","temp_min","temp_max","sort","stop","onChange","Object","defineProperty","target","value","dayForecast","_this2","this","map","index","components_DaySection","key","Math","round","style","backgroundImage","forCity","placeholder","autoFocus","onClick","document","body","classList","add","components_Carousel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.209fa029.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DaySection(props) {\n    const { dayNumber, day, min, max } = props;\n    return (\n        <div className={`day day--${dayNumber}`}>\n            <h2 className=\"date\">{day}</h2>\n            <p className=\"temp\">Tempratures:</p>\n            <p className=\"min\">Low: {min}°</p>  \n            <p className=\"max\">High: {max}°</p>\n            <div className=\"weather-icon\"></div>\n        </div>\n    );\n}\n\nexport default DaySection;","import React from 'react';\nimport Flickity from 'react-flickity-component'\nimport 'flickity/dist/flickity.min.css';\n\nconst flickityOptions = {\n    initialIndex: 2,\n    pageDots: false,\n    draggable: false\n}\n \nfunction Carousel(props) {\n    \n  return (\n    <Flickity\n      className={'carousel'} // default ''\n      elementType={'div'} // default 'div'\n      options={flickityOptions} // takes flickity options {}\n      disableImagesLoaded={false} // default false\n      reloadOnUpdate // default false\n    >\n      {props.days}\n    </Flickity>\n  )\n}\n\nexport default Carousel;","import React, { Component } from 'react';\nimport DaySection from \"./components/DaySection\";\nimport Carousel from \"./components/Carousel\";\n\nimport axios from 'axios';\n\nimport './App.css';\n\n\n// Function to help chunk the data into seperate arrays representing each day\nfunction arrayChunker(array, chunk) {\n  var i, j, tempArray;\n  var newArray = [];\n  for (i=0,j=array.length; i<j; i+=chunk) {\n      tempArray = array.slice(i,i+chunk);\n      newArray.push(tempArray);\n  }\n  return newArray;\n}\n\nclass App extends Component {\n  state = {\n    city: '', \n    dayChunks: [],\n    dates: [],\n    showCarousel: false\n  };\n\n  getWeatherData = async city => {\n    //console.log(`getting weather data for ${city}`);\n\n    await axios.get(`http://api.openweathermap.org/data/2.5/forecast?q=${city},US&units=imperial&appid=581268fb978a3330cfbfb8c780e67361`)\n      .then(res => { \n        this.setState({ \n          city: res.data.city.name,\n          dayChunks: arrayChunker(res.data.list, 8),\n          dates: [],\n          datesMinMax: [],\n        });\n      })\n\n      // Initialize an array that stores the dates for each day for display purposes\n    let days = [];\n    let dayMinMax = [];\n\n    // Loop through each Day\n    this.state.dayChunks.forEach(chunk => {\n      // get the current day in the form of MM/DD\n      let currentDay = `May ${chunk[0].dt_txt.substr(8,2)}`;\n      // add the current day to the days array\n      days.push(currentDay);\n\n      // Initialize an array that stores all of a single Day's temperatures\n      let temps = [];\n      // push the mins and maxes of each 3 hour chunk into an array for EACH day since they don't give us that general info\n        \n      chunk.forEach(e => { \n        temps.push(e.main.temp_min);\n        temps.push(e.main.temp_max);\n      });\n      // sort the temperatures \n      temps.sort();\n      dayMinMax.push([temps[0], temps[temps.length - 1]]);\n      // console.log(`day ${currentDay} min: ${temps[0]} and max: ${temps[temps.length - 1]}`);\n    })\n\n    this.setState({ dates: days, datesMinMax: dayMinMax });\n  }\n  \n  onChange = e => this.setState({ [e.target.name]: e.target.value })\n\n  render() {\n    let dayForecast;\n    let bgImage = 'https://source.unsplash.com/collection/4762064';\n      \n    if (this.state.dates) {\n      dayForecast = this.state.dates.map((day, index) => (\n        <DaySection key={index} dayNumber={index+1} day={day} min={Math.round(this.state.datesMinMax[index][0])} max={Math.round(this.state.datesMinMax[index][1])} />\n      ))\n    } else dayForecast = <p>Could not get weather data...</p>;\n    \n    return (\n      <div className=\"App\" style={{ backgroundImage: 'url(' + bgImage + ')' }}>\n            <div className=\"contentArea\">\n            <h1>The Forecast {this.state.forCity}</h1>\n            <h3>Type in a city name to see the 5 day temprature forecast</h3>\n            <div className=\"search\">\n        \n            <input placeholder=\"Enter city\" autoFocus onChange={this.onChange} name=\"city\" value={this.state.city}/>\n\n            <button onClick={() => {\n                this.setState({showCarousel:true})\n                this.getWeatherData(this.state.city)\n                document.body.classList.add('search-results');\n                this.setState({forCity: \"for \" + this.state.city });\n            }}>\n            GO\n            </button>\n            </div>\n            </div>\n            <div className='carousel-container'>\n                {this.state.showCarousel ? <Carousel days={dayForecast} /> : null }\n           </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}